apiVersion: v1
kind: ServiceAccount
metadata:
  name: deploy-controller

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: deploy-controller
rules:
- apiGroups: [""]  # Core API group
  resources: ["pods", "services"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
- apiGroups: ["apps"]
  resources: ["deployments"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: deploy-controller
subjects:
- kind: ServiceAccount
  name: deploy-controller  
  namespace: default
roleRef:
  kind: Role
  name: deploy-controller
  apiGroup: rbac.authorization.k8s.io


---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: deploy-controller
spec:
  revisionHistoryLimit: 1
  selector:
    matchLabels:
      app: deploy-controller
  template:
    metadata:
      labels:
        app: deploy-controller
    spec:
      serviceAccountName: deploy-controller
      containers:
      - name: controller
        image: localhost:5000/build-server:latest

---
# External service for the deployment controller
apiVersion: v1
kind: Service
metadata:
  name: deploy-controller
spec:
  selector:
    app: deploy-controller
  ports:
  - protocol: TCP
    port: 80
    targetPort: 5000
    nodePort: 30109
  type: NodePort

# Service account and permissions for Kaniko
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kaniko-builder
  namespace: registry-system

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: kaniko-builder
  namespace: registry-system
rules:
  - apiGroups: [""]
    resources: ["pods", "pods/log"]
    verbs: ["get", "list", "watch"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: kaniko-builder
  namespace: registry-system
subjects:
  - kind: ServiceAccount
    name: kaniko-builder
    namespace: registry-system
roleRef:
  kind: Role
  name: kaniko-builder
  apiGroup: rbac.authorization.k8s.io

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: deploy-controller
  namespace: registry-system
rules:
- apiGroups: ["batch"]
  resources: ["jobs", "jobs/status"]
  verbs: ["create", "delete", "get", "list", "watch", "patch"]
- apiGroups: [""]
  resources: ["pods", "pods/log"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["services"]
  verbs: ["get"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: deploy-controllerbinding
  namespace: registry-system
subjects:
- kind: ServiceAccount
  name: deploy-controller
  namespace: default    # Note: this is the namespace where your deploy controller runs
roleRef:
  kind: Role
  name: deploy-controller
  apiGroup: rbac.authorization.k8s.io

---
# Egress network policy that blocks all traffic for gameclient pods except to gameserver pods
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: gameclient-policy
spec:
  podSelector:
    matchLabels:
      is-gameclient: "true"
  policyTypes:
  - Egress
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          kubernetes.io/metadata.name: default
      podSelector:
        matchLabels:
          app: gameserver
    ports:
    - protocol: TCP
      port: 80
    - protocol: TCP
      port: 8080
  # Allow DNS resolution
  - to:
    - namespaceSelector:
        matchLabels:
          kubernetes.io/metadata.name: kube-system
      podSelector:
        matchLabels:
          k8s-app: kube-dns
    ports:
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 53
